{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/components/Projects.js","webpack:///./src/data/projects.js","webpack:///./src/pages/index.js","webpack:///./content/images/lavaldi.jpg","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["getSimplifiedPosts","posts","options","map","post","id","node","date","frontmatter","slug","fields","tags","title","banner","description","excerpt","slugify","string","match","x","toLowerCase","join","Projects","data","className","href","path","source","key","target","rel","icon","BlogIndex","latest","edges","simplifiedLatest","useMemo","Section","children","button","props","to","Layout","Helmet","config","siteTitle","SEO","src","lavaldi","alt","Posts","withDate","projects","pageQuery","module","exports","Cell","Date","oneMonthAgo","setMonth","getMonth","isNew","showYears","postsByYear","forEach","year","split","years","Object","keys","reverse","colors","Tags","tag","style","color","Math","floor","random","length","_objectWithoutPropertiesLoose","excluded","i","sourceKeys","indexOf"],"mappings":"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","file":"component---src-pages-index-js-49dd92671b7932220361.js","sourcesContent":["export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    banner: post.node.frontmatter.banner,\n    description: post.node.excerpt,\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React from 'react'\n\nexport default function Projects({ data }) {\n  return (\n    <div className=\"grid projects\">\n      {data.map((node) => {\n        return (\n          <a\n            href={node.path || node.source}\n            key={node.path || node.source}\n            className=\"row\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <div className=\"cell simple\">{node.icon}</div>\n            <div className=\"cell simple\">{node.title}</div>\n            <div className=\"cell simple light description\">\n              {node.description}\n            </div>\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n","export default [\n  {\n    icon: 'ðŸ‡¬ðŸ‡§',\n    title: 'Verbs',\n    path: 'https://verbs.lavaldi.com',\n    source: 'https://github.com/lavaldi/verbs',\n    description: '1000 English verb forms.',\n  },\n  {\n    icon: 'ðŸ’…',\n    title: 'normalized-styled-components',\n    path: 'https://www.npmjs.com/package/@lavaldi/normalized-components',\n    source: 'https://github.com/lavaldi/normalized-components',\n    description: 'normalize.css as styled-components.',\n  },\n]\n","import React, { useMemo } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport Projects from '../components/Projects'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nimport projects from '../data/projects'\n\nimport lavaldi from '../../content/images/lavaldi.jpg'\n\nexport default function BlogIndex({ data }) {\n  const latest = data.latest.edges\n  const simplifiedLatest = useMemo(() => getSimplifiedPosts(latest), [latest])\n\n  const Section = ({ title, children, button, ...props }) => (\n    <section {...props}>\n      <h2>\n        {title}\n        {button && (\n          <Link className=\"section-button\" to=\"/blog\">\n            View all\n          </Link>\n        )}\n      </h2>\n      {children}\n    </section>\n  )\n\n  return (\n    <Layout>\n      <Helmet title={config.siteTitle} />\n      <SEO />\n      <section className=\"lead\">\n        <div className=\"container\">\n          <div className=\"copy\">\n            <h1>Hey! I'm Claudia Valdivieso.</h1>\n            <p>\n              I'm christian, wife, mother and a software engineer, and sometimes\n              I write about christianity and programming. You can read about{' '}\n              <Link to=\"/code\">code</Link>, and{' '}\n              <Link to=\"/jesus-freak\">christianity</Link>, or learn more{' '}\n              <Link to=\"/me\">about me</Link>.\n            </p>\n          </div>\n\n          <div className=\"image\">\n            <img src={lavaldi} alt=\"Claudia Valdivieso\" />\n          </div>\n        </div>\n      </section>\n      <div className=\"container index\">\n        <Section title=\"Latest Articles\" button>\n          <Posts data={simplifiedLatest} tags withDate />\n        </Section>\n        <Section title=\"Projects\">\n          <Projects data={projects} />\n        </Section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    latest: allMarkdownRemark(\n      limit: 10\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"post\" } }\n        isFuture: { eq: false }\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/lavaldi-5fb16c98d2bcb79d14038beb058a6514.jpg\";","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\nimport Tags from '../components/Tags'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">New!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && <Tags tags={node.tags} />}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { slugify } from '../utils/helpers'\n\nconst colors = [\n  '#37b24d',\n  '#f03e3e',\n  '#10a2f5',\n  '#E8AC2A',\n  '#fd7e14',\n  '#1c7ed6',\n  '#7950f2',\n]\n\nfunction getRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nexport default function Tags({ tags }) {\n  return (\n    <div className=\"cell tags\">\n      {tags ? tags.map((tag) => (\n        <Link\n          key={tag}\n          to={`/tags/${slugify(tag)}`}\n          style={{\n            color: getRandomColor(),\n          }}\n        >\n          #{tag}\n        </Link>\n      )) : null}\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}