{"componentChunkName":"component---src-templates-post-js","path":"/pasar-argumentos-desde-la-linea-de-comandos-en-node-js/","result":{"data":{"markdownRemark":{"html":"<p>Puede pasar cualquier n√∫mero de argumentos al invocar una aplicaci√≥n Node.js usando</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span></span>node app.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Los argumentos pueden ser independientes o tener una clave y un valor.</p>\n<p>Por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span></span>node app.js lavaldi</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>o</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span></span>node app.js <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>lavaldi</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Esto cambia la forma de recuperar este valor en el c√≥digo de Node.</p>\n<p>La forma en que lo recuperamos es usando el objeto <code class=\"language-text\">process</code> incorporado en Node.</p>\n<p>Expone una propiedad <code class=\"language-text\">argv</code>, que es un array que contiene todos los argumentos de invocaci√≥n de la l√≠nea de comandos.</p>\n<p>El primer argumento es la ruta completa del comando <code class=\"language-text\">node</code>.</p>\n<p>El segundo elemento es la ruta completa del archivo que se est√° ejecutando.</p>\n<p>Todos los argumentos adicionales est√°n presentes desde la tercera posici√≥n en adelante.</p>\n<p>Puedes iterar sobre todos los argumentos (incluyendo la ruta del nodo y la ruta del archivo) usando un bucle:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Puedes obtener solo los argumentos adicionales creando un nuevo array que excluya los primeros 2 par√°metros:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Si tiene un argumento sin un nombre de √≠ndice, as√≠:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span></span>node app.js lavaldi</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Puedes acceder a √©l usando:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nargs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>En este caso:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span></span>node app.js <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>lavaldi</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">args[0]</code> es <code class=\"language-text\">name=lavaldi</code>, y debes parsearlo.</p>\n<p>Pero, la mejor manera de hacerlo es mediante el uso de una librer√≠a llamada <a href=\"https://www.npmjs.com/package/minimist\"><code class=\"language-text\">minimist</code></a>, que ayuda a lidiar con los argumentos:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> minimist <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minimist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token function\">minimist</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nargs<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// lavaldi</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>üòâ</p>","excerpt":"Puede pasar cualquier n√∫mero de argumentos al invocar una aplicaci√≥n Node.js usando Los argumentos pueden ser independientes o tener una‚Ä¶","fields":{"slug":"/pasar-argumentos-desde-la-linea-de-comandos-en-node-js/"},"frontmatter":{"title":"Pasar argumentos desde la l√≠nea de comandos en Node.js","date":"April 15, 2020","tags":["node","minimist"],"description":null,"banner":"https://i.imgur.com/GFyfBOp.png","slug":"pasar-argumentos-desde-la-linea-de-comandos-en-node-js"}}},"pageContext":{"slug":"/pasar-argumentos-desde-la-linea-de-comandos-en-node-js/","previous":{"id":"8c4fe519-94fd-58cc-8d80-079a941148e9","frontmatter":{"title":"C√≥mo limpiar las ramas locales de Git","banner":"https://i.imgur.com/kwUOgyK.png","categories":["Code"],"tags":["git"],"template":"post"},"fields":{"slug":"/limpiar-ramas-locales-git/"}},"next":{"id":"075b1e8b-b92b-5c39-93d3-89a027563869","frontmatter":{"title":"C√≥mo sobrevivo al distanciamiento social","banner":"https://i.imgur.com/rWJBs40.jpg","categories":["JesusFreak"],"tags":["cuarentena","Paul Tripp"],"template":"post"},"fields":{"slug":"/como-sobrevivo-al-distanciamiento-social/"}}}},"staticQueryHashes":[]}