{"version":3,"sources":["webpack:///./src/pages/code.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["BlogIndex","data","posts","allMarkdownRemark","edges","simplifiedPosts","useMemo","getSimplifiedPosts","title","config","siteTitle","customDescription","className","showYears","withDate","narrow","pageQuery","options","map","post","id","node","date","frontmatter","slug","fields","tags","banner","description","excerpt","slugify","string","match","x","toLowerCase","join","Cell","Date","oneMonthAgo","setMonth","getMonth","isNew","key","to","Posts","postsByYear","forEach","year","split","years","Object","keys","reverse","colors","Tags","tag","style","color","Math","floor","random","length","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","indexOf"],"mappings":"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","file":"component---src-pages-code-js-dd6f5bb7d00e66be1df6.js","sourcesContent":["import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function BlogIndex({ data, ...props }) {\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n\n  return (\n    <Layout>\n      <Helmet title={`Code | ${config.siteTitle}`} />\n      <SEO customDescription=\"Articles, tutorials and more\" />\n      <header>\n        <div className=\"container text-center\">\n          <h1>Code</h1>\n          <p className=\"subtitle\">Articles, tutorials and more</p>\n        </div>\n      </header>\n      <section>\n        <div className=\"container\">\n          <Posts data={simplifiedPosts} showYears withDate narrow />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query CodeQuery {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { categories: { in: \"Code\" } }\n        isFuture: { eq: false }\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    banner: post.node.frontmatter.banner,\n    description: post.node.excerpt,\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\nimport Tags from '../components/Tags'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">New!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && <Tags tags={node.tags} />}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { slugify } from '../utils/helpers'\n\nconst colors = [\n  '#37b24d',\n  '#f03e3e',\n  '#10a2f5',\n  '#E8AC2A',\n  '#fd7e14',\n  '#1c7ed6',\n  '#7950f2',\n]\n\nfunction getRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nexport default function Tags({ tags }) {\n  return (\n    <div className=\"cell tags\">\n      {tags ? tags.map((tag) => (\n        <Link\n          key={tag}\n          to={`/tags/${slugify(tag)}`}\n          style={{\n            color: getRandomColor(),\n          }}\n        >\n          #{tag}\n        </Link>\n      )) : null}\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}